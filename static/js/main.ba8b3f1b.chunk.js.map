{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","name","email","className","href","TodoInfo","todo","user","title","id","completed","classNames","TodoList","todos","map","complitlyTodo","username","getUser","usersFromServer","find","userId","App","useState","stateTodos","setTodos","chooseUser","setUser","newTitle","setTitle","isErrorTitle","setErrorTitle","isErrorSelect","setErrorSelect","Todo","curentId","crateTodo","onHandelChange","event","target","value","action","method","onSubmit","preventDefault","selectUser","newTodos","unshift","addTodo","type","placeholder","onChange","disabled","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba8b3f1b.chunk.js","sourcesContent":["import { User } from '../../type';\n\nexport const UserInfo: React.FC<User> = ({ name, email }) => {\n  return (\n    <a className=\"UserInfo\" href={email}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { ComplitlyTodo } from '../../type';\nimport { UserInfo } from '../UserInfo';\n\nexport const TodoInfo: React.FC<ComplitlyTodo> = ({ todo, user }) => {\n  const { title, id, completed } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo {...user} />}\n    </article>\n  );\n};\n","import { ComplitlyTodo } from '../../type';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Prop = {\n  todos: ComplitlyTodo[]\n};\n\nexport const TodoList: React.FC<Prop> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((complitlyTodo: ComplitlyTodo) => {\n        return (\n          <>\n            <TodoInfo\n              key={complitlyTodo.todo.id}\n              {...complitlyTodo}\n            />\n          </>\n        );\n      })}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { ComplitlyTodo, HendleEvent, TypeTodo } from './type';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst getUser = (todo: TypeTodo) => {\n  return usersFromServer.find(user => user.id === todo.userId);\n};\n\nconst todos: ComplitlyTodo[] = todosFromServer.map(todo => ({\n  todo,\n  user: getUser(todo),\n}));\n\nconst crateTodo = () => {\n  let curentId = 15;\n\n  const Todo = (title: string, userId: number): TypeTodo => {\n    curentId += 1;\n\n    return {\n      title,\n      userId,\n      id: curentId,\n      completed: false,\n    };\n  };\n\n  return Todo;\n};\n\nexport const App = () => {\n  const [stateTodos, setTodos] = useState(todos);\n  const [chooseUser, setUser] = useState('empty');\n  const [newTitle, setTitle] = useState('');\n  const [isErrorTitle, setErrorTitle] = useState(false);\n  const [isErrorSelect, setErrorSelect] = useState(false);\n  const Todo = crateTodo();\n\n  const addTodo = () => {\n    if (chooseUser === 'empty') {\n      setErrorSelect(true);\n    }\n\n    if (newTitle === '') {\n      setErrorTitle(true);\n\n      return;\n    }\n\n    setErrorSelect(false);\n    setErrorTitle(false);\n\n    const selectUser = usersFromServer[+chooseUser];\n    const newTodo = Todo(newTitle, selectUser.id);\n\n    const complitlyTodo = {\n      todo: newTodo,\n      user: selectUser,\n    };\n\n    const newTodos = [...stateTodos];\n\n    newTodos.unshift(complitlyTodo);\n\n    setTodos(newTodos);\n    setUser('empty');\n    setTitle('');\n  };\n\n  const onHandelChange = (event: HendleEvent) => {\n    const { value, name } = event.target;\n\n    if (name === 'title') {\n      setTitle(value);\n\n      return;\n    }\n\n    setUser(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          addTodo();\n        }}\n      >\n        <div className=\"field\">\n          <input\n            name=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={newTitle}\n            placeholder=\"Enter a title\"\n            onChange={(event) => onHandelChange(event)}\n          />\n          {isErrorTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            name=\"user\"\n            data-cy=\"userSelect\"\n            value={chooseUser}\n            onChange={(event) => onHandelChange(event)}\n          >\n            <option value=\"empty\" disabled>Choose a user</option>\n\n            {usersFromServer.map((user, index) => (\n              <option value={index}>{user.name}</option>\n            ))}\n          </select>\n          {isErrorSelect && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={stateTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}